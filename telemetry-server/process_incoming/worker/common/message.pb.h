// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Header;
class Field;
class Message;

enum Header_HmacHashFunction {
  Header_HmacHashFunction_MD5 = 0,
  Header_HmacHashFunction_SHA1 = 1
};
bool Header_HmacHashFunction_IsValid(int value);
const Header_HmacHashFunction Header_HmacHashFunction_HmacHashFunction_MIN = Header_HmacHashFunction_MD5;
const Header_HmacHashFunction Header_HmacHashFunction_HmacHashFunction_MAX = Header_HmacHashFunction_SHA1;
const int Header_HmacHashFunction_HmacHashFunction_ARRAYSIZE = Header_HmacHashFunction_HmacHashFunction_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_HmacHashFunction_descriptor();
inline const ::std::string& Header_HmacHashFunction_Name(Header_HmacHashFunction value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_HmacHashFunction_descriptor(), value);
}
inline bool Header_HmacHashFunction_Parse(
    const ::std::string& name, Header_HmacHashFunction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_HmacHashFunction>(
    Header_HmacHashFunction_descriptor(), name, value);
}
enum Field_ValueType {
  Field_ValueType_STRING = 0,
  Field_ValueType_BYTES = 1,
  Field_ValueType_INTEGER = 2,
  Field_ValueType_DOUBLE = 3,
  Field_ValueType_BOOL = 4
};
bool Field_ValueType_IsValid(int value);
const Field_ValueType Field_ValueType_ValueType_MIN = Field_ValueType_STRING;
const Field_ValueType Field_ValueType_ValueType_MAX = Field_ValueType_BOOL;
const int Field_ValueType_ValueType_ARRAYSIZE = Field_ValueType_ValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Field_ValueType_descriptor();
inline const ::std::string& Field_ValueType_Name(Field_ValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Field_ValueType_descriptor(), value);
}
inline bool Field_ValueType_Parse(
    const ::std::string& name, Field_ValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Field_ValueType>(
    Field_ValueType_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Header_HmacHashFunction HmacHashFunction;
  static const HmacHashFunction MD5 = Header_HmacHashFunction_MD5;
  static const HmacHashFunction SHA1 = Header_HmacHashFunction_SHA1;
  static inline bool HmacHashFunction_IsValid(int value) {
    return Header_HmacHashFunction_IsValid(value);
  }
  static const HmacHashFunction HmacHashFunction_MIN =
    Header_HmacHashFunction_HmacHashFunction_MIN;
  static const HmacHashFunction HmacHashFunction_MAX =
    Header_HmacHashFunction_HmacHashFunction_MAX;
  static const int HmacHashFunction_ARRAYSIZE =
    Header_HmacHashFunction_HmacHashFunction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HmacHashFunction_descriptor() {
    return Header_HmacHashFunction_descriptor();
  }
  static inline const ::std::string& HmacHashFunction_Name(HmacHashFunction value) {
    return Header_HmacHashFunction_Name(value);
  }
  static inline bool HmacHashFunction_Parse(const ::std::string& name,
      HmacHashFunction* value) {
    return Header_HmacHashFunction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 message_length = 1;
  inline bool has_message_length() const;
  inline void clear_message_length();
  static const int kMessageLengthFieldNumber = 1;
  inline ::google::protobuf::uint32 message_length() const;
  inline void set_message_length(::google::protobuf::uint32 value);

  // optional .message.Header.HmacHashFunction hmac_hash_function = 3 [default = MD5];
  inline bool has_hmac_hash_function() const;
  inline void clear_hmac_hash_function();
  static const int kHmacHashFunctionFieldNumber = 3;
  inline ::message::Header_HmacHashFunction hmac_hash_function() const;
  inline void set_hmac_hash_function(::message::Header_HmacHashFunction value);

  // optional string hmac_signer = 4;
  inline bool has_hmac_signer() const;
  inline void clear_hmac_signer();
  static const int kHmacSignerFieldNumber = 4;
  inline const ::std::string& hmac_signer() const;
  inline void set_hmac_signer(const ::std::string& value);
  inline void set_hmac_signer(const char* value);
  inline void set_hmac_signer(const char* value, size_t size);
  inline ::std::string* mutable_hmac_signer();
  inline ::std::string* release_hmac_signer();

  // optional uint32 hmac_key_version = 5;
  inline bool has_hmac_key_version() const;
  inline void clear_hmac_key_version();
  static const int kHmacKeyVersionFieldNumber = 5;
  inline ::google::protobuf::uint32 hmac_key_version() const;
  inline void set_hmac_key_version(::google::protobuf::uint32 value);

  // optional bytes hmac = 6;
  inline bool has_hmac() const;
  inline void clear_hmac();
  static const int kHmacFieldNumber = 6;
  inline const ::std::string& hmac() const;
  inline void set_hmac(const ::std::string& value);
  inline void set_hmac(const char* value);
  inline void set_hmac(const void* value, size_t size);
  inline ::std::string* mutable_hmac();
  inline ::std::string* release_hmac();

  // @@protoc_insertion_point(class_scope:message.Header)
 private:
  inline void set_has_message_length();
  inline void clear_has_message_length();
  inline void set_has_hmac_hash_function();
  inline void clear_has_hmac_hash_function();
  inline void set_has_hmac_signer();
  inline void clear_has_hmac_signer();
  inline void set_has_hmac_key_version();
  inline void clear_has_hmac_key_version();
  inline void set_has_hmac();
  inline void clear_has_hmac();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 message_length_;
  int hmac_hash_function_;
  ::std::string* hmac_signer_;
  ::std::string* hmac_;
  ::google::protobuf::uint32 hmac_key_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Field : public ::google::protobuf::Message {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Field& default_instance();

  void Swap(Field* other);

  // implements Message ----------------------------------------------

  Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Field_ValueType ValueType;
  static const ValueType STRING = Field_ValueType_STRING;
  static const ValueType BYTES = Field_ValueType_BYTES;
  static const ValueType INTEGER = Field_ValueType_INTEGER;
  static const ValueType DOUBLE = Field_ValueType_DOUBLE;
  static const ValueType BOOL = Field_ValueType_BOOL;
  static inline bool ValueType_IsValid(int value) {
    return Field_ValueType_IsValid(value);
  }
  static const ValueType ValueType_MIN =
    Field_ValueType_ValueType_MIN;
  static const ValueType ValueType_MAX =
    Field_ValueType_ValueType_MAX;
  static const int ValueType_ARRAYSIZE =
    Field_ValueType_ValueType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValueType_descriptor() {
    return Field_ValueType_descriptor();
  }
  static inline const ::std::string& ValueType_Name(ValueType value) {
    return Field_ValueType_Name(value);
  }
  static inline bool ValueType_Parse(const ::std::string& name,
      ValueType* value) {
    return Field_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();

  // optional .message.Field.ValueType value_type = 2 [default = STRING];
  inline bool has_value_type() const;
  inline void clear_value_type();
  static const int kValueTypeFieldNumber = 2;
  inline ::message::Field_ValueType value_type() const;
  inline void set_value_type(::message::Field_ValueType value);

  // optional string representation = 3;
  inline bool has_representation() const;
  inline void clear_representation();
  static const int kRepresentationFieldNumber = 3;
  inline const ::std::string& representation() const;
  inline void set_representation(const ::std::string& value);
  inline void set_representation(const char* value);
  inline void set_representation(const char* value, size_t size);
  inline ::std::string* mutable_representation();
  inline ::std::string* release_representation();

  // repeated string value_string = 4;
  inline int value_string_size() const;
  inline void clear_value_string();
  static const int kValueStringFieldNumber = 4;
  inline const ::std::string& value_string(int index) const;
  inline ::std::string* mutable_value_string(int index);
  inline void set_value_string(int index, const ::std::string& value);
  inline void set_value_string(int index, const char* value);
  inline void set_value_string(int index, const char* value, size_t size);
  inline ::std::string* add_value_string();
  inline void add_value_string(const ::std::string& value);
  inline void add_value_string(const char* value);
  inline void add_value_string(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value_string() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value_string();

  // repeated bytes value_bytes = 5;
  inline int value_bytes_size() const;
  inline void clear_value_bytes();
  static const int kValueBytesFieldNumber = 5;
  inline const ::std::string& value_bytes(int index) const;
  inline ::std::string* mutable_value_bytes(int index);
  inline void set_value_bytes(int index, const ::std::string& value);
  inline void set_value_bytes(int index, const char* value);
  inline void set_value_bytes(int index, const void* value, size_t size);
  inline ::std::string* add_value_bytes();
  inline void add_value_bytes(const ::std::string& value);
  inline void add_value_bytes(const char* value);
  inline void add_value_bytes(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value_bytes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value_bytes();

  // repeated int64 value_integer = 6 [packed = true];
  inline int value_integer_size() const;
  inline void clear_value_integer();
  static const int kValueIntegerFieldNumber = 6;
  inline ::google::protobuf::int64 value_integer(int index) const;
  inline void set_value_integer(int index, ::google::protobuf::int64 value);
  inline void add_value_integer(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      value_integer() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_value_integer();

  // repeated double value_double = 7 [packed = true];
  inline int value_double_size() const;
  inline void clear_value_double();
  static const int kValueDoubleFieldNumber = 7;
  inline double value_double(int index) const;
  inline void set_value_double(int index, double value);
  inline void add_value_double(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      value_double() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_value_double();

  // repeated bool value_bool = 8 [packed = true];
  inline int value_bool_size() const;
  inline void clear_value_bool();
  static const int kValueBoolFieldNumber = 8;
  inline bool value_bool(int index) const;
  inline void set_value_bool(int index, bool value);
  inline void add_value_bool(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      value_bool() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_value_bool();

  // @@protoc_insertion_point(class_scope:message.Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value_type();
  inline void clear_has_value_type();
  inline void set_has_representation();
  inline void clear_has_representation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* representation_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_string_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_bytes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > value_integer_;
  mutable int _value_integer_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > value_double_;
  mutable int _value_double_cached_byte_size_;
  ::google::protobuf::RepeatedField< bool > value_bool_;
  mutable int _value_bool_cached_byte_size_;
  int value_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Field* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();

  // required int64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();

  // optional string logger = 4;
  inline bool has_logger() const;
  inline void clear_logger();
  static const int kLoggerFieldNumber = 4;
  inline const ::std::string& logger() const;
  inline void set_logger(const ::std::string& value);
  inline void set_logger(const char* value);
  inline void set_logger(const char* value, size_t size);
  inline ::std::string* mutable_logger();
  inline ::std::string* release_logger();

  // optional int32 severity = 5;
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 5;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);

  // optional string payload = 6;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 6;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const char* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();

  // optional string env_version = 7;
  inline bool has_env_version() const;
  inline void clear_env_version();
  static const int kEnvVersionFieldNumber = 7;
  inline const ::std::string& env_version() const;
  inline void set_env_version(const ::std::string& value);
  inline void set_env_version(const char* value);
  inline void set_env_version(const char* value, size_t size);
  inline ::std::string* mutable_env_version();
  inline ::std::string* release_env_version();

  // optional int32 pid = 8;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 8;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional string hostname = 9;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 9;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();

  // repeated .message.Field fields = 10;
  inline int fields_size() const;
  inline void clear_fields();
  static const int kFieldsFieldNumber = 10;
  inline const ::message::Field& fields(int index) const;
  inline ::message::Field* mutable_fields(int index);
  inline ::message::Field* add_fields();
  inline const ::google::protobuf::RepeatedPtrField< ::message::Field >&
      fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::Field >*
      mutable_fields();

  // @@protoc_insertion_point(class_scope:message.Message)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_logger();
  inline void clear_has_logger();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_env_version();
  inline void clear_has_env_version();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_hostname();
  inline void clear_has_hostname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uuid_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* type_;
  ::std::string* logger_;
  ::std::string* payload_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 pid_;
  ::std::string* env_version_;
  ::std::string* hostname_;
  ::google::protobuf::RepeatedPtrField< ::message::Field > fields_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Header

// required uint32 message_length = 1;
inline bool Header::has_message_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_message_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_message_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_message_length() {
  message_length_ = 0u;
  clear_has_message_length();
}
inline ::google::protobuf::uint32 Header::message_length() const {
  return message_length_;
}
inline void Header::set_message_length(::google::protobuf::uint32 value) {
  set_has_message_length();
  message_length_ = value;
}

// optional .message.Header.HmacHashFunction hmac_hash_function = 3 [default = MD5];
inline bool Header::has_hmac_hash_function() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_hmac_hash_function() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_hmac_hash_function() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_hmac_hash_function() {
  hmac_hash_function_ = 0;
  clear_has_hmac_hash_function();
}
inline ::message::Header_HmacHashFunction Header::hmac_hash_function() const {
  return static_cast< ::message::Header_HmacHashFunction >(hmac_hash_function_);
}
inline void Header::set_hmac_hash_function(::message::Header_HmacHashFunction value) {
  GOOGLE_DCHECK(::message::Header_HmacHashFunction_IsValid(value));
  set_has_hmac_hash_function();
  hmac_hash_function_ = value;
}

// optional string hmac_signer = 4;
inline bool Header::has_hmac_signer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_hmac_signer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_hmac_signer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_hmac_signer() {
  if (hmac_signer_ != &::google::protobuf::internal::kEmptyString) {
    hmac_signer_->clear();
  }
  clear_has_hmac_signer();
}
inline const ::std::string& Header::hmac_signer() const {
  return *hmac_signer_;
}
inline void Header::set_hmac_signer(const ::std::string& value) {
  set_has_hmac_signer();
  if (hmac_signer_ == &::google::protobuf::internal::kEmptyString) {
    hmac_signer_ = new ::std::string;
  }
  hmac_signer_->assign(value);
}
inline void Header::set_hmac_signer(const char* value) {
  set_has_hmac_signer();
  if (hmac_signer_ == &::google::protobuf::internal::kEmptyString) {
    hmac_signer_ = new ::std::string;
  }
  hmac_signer_->assign(value);
}
inline void Header::set_hmac_signer(const char* value, size_t size) {
  set_has_hmac_signer();
  if (hmac_signer_ == &::google::protobuf::internal::kEmptyString) {
    hmac_signer_ = new ::std::string;
  }
  hmac_signer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::mutable_hmac_signer() {
  set_has_hmac_signer();
  if (hmac_signer_ == &::google::protobuf::internal::kEmptyString) {
    hmac_signer_ = new ::std::string;
  }
  return hmac_signer_;
}
inline ::std::string* Header::release_hmac_signer() {
  clear_has_hmac_signer();
  if (hmac_signer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hmac_signer_;
    hmac_signer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 hmac_key_version = 5;
inline bool Header::has_hmac_key_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_hmac_key_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_hmac_key_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_hmac_key_version() {
  hmac_key_version_ = 0u;
  clear_has_hmac_key_version();
}
inline ::google::protobuf::uint32 Header::hmac_key_version() const {
  return hmac_key_version_;
}
inline void Header::set_hmac_key_version(::google::protobuf::uint32 value) {
  set_has_hmac_key_version();
  hmac_key_version_ = value;
}

// optional bytes hmac = 6;
inline bool Header::has_hmac() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::set_has_hmac() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Header::clear_has_hmac() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Header::clear_hmac() {
  if (hmac_ != &::google::protobuf::internal::kEmptyString) {
    hmac_->clear();
  }
  clear_has_hmac();
}
inline const ::std::string& Header::hmac() const {
  return *hmac_;
}
inline void Header::set_hmac(const ::std::string& value) {
  set_has_hmac();
  if (hmac_ == &::google::protobuf::internal::kEmptyString) {
    hmac_ = new ::std::string;
  }
  hmac_->assign(value);
}
inline void Header::set_hmac(const char* value) {
  set_has_hmac();
  if (hmac_ == &::google::protobuf::internal::kEmptyString) {
    hmac_ = new ::std::string;
  }
  hmac_->assign(value);
}
inline void Header::set_hmac(const void* value, size_t size) {
  set_has_hmac();
  if (hmac_ == &::google::protobuf::internal::kEmptyString) {
    hmac_ = new ::std::string;
  }
  hmac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::mutable_hmac() {
  set_has_hmac();
  if (hmac_ == &::google::protobuf::internal::kEmptyString) {
    hmac_ = new ::std::string;
  }
  return hmac_;
}
inline ::std::string* Header::release_hmac() {
  clear_has_hmac();
  if (hmac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hmac_;
    hmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Field

// required string name = 1;
inline bool Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Field::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Field::name() const {
  return *name_;
}
inline void Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .message.Field.ValueType value_type = 2 [default = STRING];
inline bool Field::has_value_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Field::set_has_value_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Field::clear_has_value_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Field::clear_value_type() {
  value_type_ = 0;
  clear_has_value_type();
}
inline ::message::Field_ValueType Field::value_type() const {
  return static_cast< ::message::Field_ValueType >(value_type_);
}
inline void Field::set_value_type(::message::Field_ValueType value) {
  GOOGLE_DCHECK(::message::Field_ValueType_IsValid(value));
  set_has_value_type();
  value_type_ = value;
}

// optional string representation = 3;
inline bool Field::has_representation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Field::set_has_representation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Field::clear_has_representation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Field::clear_representation() {
  if (representation_ != &::google::protobuf::internal::kEmptyString) {
    representation_->clear();
  }
  clear_has_representation();
}
inline const ::std::string& Field::representation() const {
  return *representation_;
}
inline void Field::set_representation(const ::std::string& value) {
  set_has_representation();
  if (representation_ == &::google::protobuf::internal::kEmptyString) {
    representation_ = new ::std::string;
  }
  representation_->assign(value);
}
inline void Field::set_representation(const char* value) {
  set_has_representation();
  if (representation_ == &::google::protobuf::internal::kEmptyString) {
    representation_ = new ::std::string;
  }
  representation_->assign(value);
}
inline void Field::set_representation(const char* value, size_t size) {
  set_has_representation();
  if (representation_ == &::google::protobuf::internal::kEmptyString) {
    representation_ = new ::std::string;
  }
  representation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Field::mutable_representation() {
  set_has_representation();
  if (representation_ == &::google::protobuf::internal::kEmptyString) {
    representation_ = new ::std::string;
  }
  return representation_;
}
inline ::std::string* Field::release_representation() {
  clear_has_representation();
  if (representation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = representation_;
    representation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string value_string = 4;
inline int Field::value_string_size() const {
  return value_string_.size();
}
inline void Field::clear_value_string() {
  value_string_.Clear();
}
inline const ::std::string& Field::value_string(int index) const {
  return value_string_.Get(index);
}
inline ::std::string* Field::mutable_value_string(int index) {
  return value_string_.Mutable(index);
}
inline void Field::set_value_string(int index, const ::std::string& value) {
  value_string_.Mutable(index)->assign(value);
}
inline void Field::set_value_string(int index, const char* value) {
  value_string_.Mutable(index)->assign(value);
}
inline void Field::set_value_string(int index, const char* value, size_t size) {
  value_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Field::add_value_string() {
  return value_string_.Add();
}
inline void Field::add_value_string(const ::std::string& value) {
  value_string_.Add()->assign(value);
}
inline void Field::add_value_string(const char* value) {
  value_string_.Add()->assign(value);
}
inline void Field::add_value_string(const char* value, size_t size) {
  value_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Field::value_string() const {
  return value_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Field::mutable_value_string() {
  return &value_string_;
}

// repeated bytes value_bytes = 5;
inline int Field::value_bytes_size() const {
  return value_bytes_.size();
}
inline void Field::clear_value_bytes() {
  value_bytes_.Clear();
}
inline const ::std::string& Field::value_bytes(int index) const {
  return value_bytes_.Get(index);
}
inline ::std::string* Field::mutable_value_bytes(int index) {
  return value_bytes_.Mutable(index);
}
inline void Field::set_value_bytes(int index, const ::std::string& value) {
  value_bytes_.Mutable(index)->assign(value);
}
inline void Field::set_value_bytes(int index, const char* value) {
  value_bytes_.Mutable(index)->assign(value);
}
inline void Field::set_value_bytes(int index, const void* value, size_t size) {
  value_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Field::add_value_bytes() {
  return value_bytes_.Add();
}
inline void Field::add_value_bytes(const ::std::string& value) {
  value_bytes_.Add()->assign(value);
}
inline void Field::add_value_bytes(const char* value) {
  value_bytes_.Add()->assign(value);
}
inline void Field::add_value_bytes(const void* value, size_t size) {
  value_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Field::value_bytes() const {
  return value_bytes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Field::mutable_value_bytes() {
  return &value_bytes_;
}

// repeated int64 value_integer = 6 [packed = true];
inline int Field::value_integer_size() const {
  return value_integer_.size();
}
inline void Field::clear_value_integer() {
  value_integer_.Clear();
}
inline ::google::protobuf::int64 Field::value_integer(int index) const {
  return value_integer_.Get(index);
}
inline void Field::set_value_integer(int index, ::google::protobuf::int64 value) {
  value_integer_.Set(index, value);
}
inline void Field::add_value_integer(::google::protobuf::int64 value) {
  value_integer_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Field::value_integer() const {
  return value_integer_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Field::mutable_value_integer() {
  return &value_integer_;
}

// repeated double value_double = 7 [packed = true];
inline int Field::value_double_size() const {
  return value_double_.size();
}
inline void Field::clear_value_double() {
  value_double_.Clear();
}
inline double Field::value_double(int index) const {
  return value_double_.Get(index);
}
inline void Field::set_value_double(int index, double value) {
  value_double_.Set(index, value);
}
inline void Field::add_value_double(double value) {
  value_double_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
Field::value_double() const {
  return value_double_;
}
inline ::google::protobuf::RepeatedField< double >*
Field::mutable_value_double() {
  return &value_double_;
}

// repeated bool value_bool = 8 [packed = true];
inline int Field::value_bool_size() const {
  return value_bool_.size();
}
inline void Field::clear_value_bool() {
  value_bool_.Clear();
}
inline bool Field::value_bool(int index) const {
  return value_bool_.Get(index);
}
inline void Field::set_value_bool(int index, bool value) {
  value_bool_.Set(index, value);
}
inline void Field::add_value_bool(bool value) {
  value_bool_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
Field::value_bool() const {
  return value_bool_;
}
inline ::google::protobuf::RepeatedField< bool >*
Field::mutable_value_bool() {
  return &value_bool_;
}

// -------------------------------------------------------------------

// Message

// required bytes uuid = 1;
inline bool Message::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& Message::uuid() const {
  return *uuid_;
}
inline void Message::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Message::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Message::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* Message::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 timestamp = 2;
inline bool Message::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Message::timestamp() const {
  return timestamp_;
}
inline void Message::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional string type = 3;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Message::type() const {
  return *type_;
}
inline void Message::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Message::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Message::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Message::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string logger = 4;
inline bool Message::has_logger() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_logger() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_logger() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_logger() {
  if (logger_ != &::google::protobuf::internal::kEmptyString) {
    logger_->clear();
  }
  clear_has_logger();
}
inline const ::std::string& Message::logger() const {
  return *logger_;
}
inline void Message::set_logger(const ::std::string& value) {
  set_has_logger();
  if (logger_ == &::google::protobuf::internal::kEmptyString) {
    logger_ = new ::std::string;
  }
  logger_->assign(value);
}
inline void Message::set_logger(const char* value) {
  set_has_logger();
  if (logger_ == &::google::protobuf::internal::kEmptyString) {
    logger_ = new ::std::string;
  }
  logger_->assign(value);
}
inline void Message::set_logger(const char* value, size_t size) {
  set_has_logger();
  if (logger_ == &::google::protobuf::internal::kEmptyString) {
    logger_ = new ::std::string;
  }
  logger_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_logger() {
  set_has_logger();
  if (logger_ == &::google::protobuf::internal::kEmptyString) {
    logger_ = new ::std::string;
  }
  return logger_;
}
inline ::std::string* Message::release_logger() {
  clear_has_logger();
  if (logger_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logger_;
    logger_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 severity = 5;
inline bool Message::has_severity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_severity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_severity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 Message::severity() const {
  return severity_;
}
inline void Message::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional string payload = 6;
inline bool Message::has_payload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_payload() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_payload() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& Message::payload() const {
  return *payload_;
}
inline void Message::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Message::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Message::set_payload(const char* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* Message::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string env_version = 7;
inline bool Message::has_env_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message::set_has_env_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message::clear_has_env_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message::clear_env_version() {
  if (env_version_ != &::google::protobuf::internal::kEmptyString) {
    env_version_->clear();
  }
  clear_has_env_version();
}
inline const ::std::string& Message::env_version() const {
  return *env_version_;
}
inline void Message::set_env_version(const ::std::string& value) {
  set_has_env_version();
  if (env_version_ == &::google::protobuf::internal::kEmptyString) {
    env_version_ = new ::std::string;
  }
  env_version_->assign(value);
}
inline void Message::set_env_version(const char* value) {
  set_has_env_version();
  if (env_version_ == &::google::protobuf::internal::kEmptyString) {
    env_version_ = new ::std::string;
  }
  env_version_->assign(value);
}
inline void Message::set_env_version(const char* value, size_t size) {
  set_has_env_version();
  if (env_version_ == &::google::protobuf::internal::kEmptyString) {
    env_version_ = new ::std::string;
  }
  env_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_env_version() {
  set_has_env_version();
  if (env_version_ == &::google::protobuf::internal::kEmptyString) {
    env_version_ = new ::std::string;
  }
  return env_version_;
}
inline ::std::string* Message::release_env_version() {
  clear_has_env_version();
  if (env_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = env_version_;
    env_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pid = 8;
inline bool Message::has_pid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message::set_has_pid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message::clear_has_pid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 Message::pid() const {
  return pid_;
}
inline void Message::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// optional string hostname = 9;
inline bool Message::has_hostname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Message::set_has_hostname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Message::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Message::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& Message::hostname() const {
  return *hostname_;
}
inline void Message::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Message::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Message::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* Message::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .message.Field fields = 10;
inline int Message::fields_size() const {
  return fields_.size();
}
inline void Message::clear_fields() {
  fields_.Clear();
}
inline const ::message::Field& Message::fields(int index) const {
  return fields_.Get(index);
}
inline ::message::Field* Message::mutable_fields(int index) {
  return fields_.Mutable(index);
}
inline ::message::Field* Message::add_fields() {
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::Field >&
Message::fields() const {
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::Field >*
Message::mutable_fields() {
  return &fields_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::Header_HmacHashFunction>() {
  return ::message::Header_HmacHashFunction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::Field_ValueType>() {
  return ::message::Field_ValueType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
