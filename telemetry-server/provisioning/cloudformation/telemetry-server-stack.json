{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CloudFormation template for telemetry-server setup. This stack takes care of everything from accepting Telemetry submissions via HTTPS to saving published data in S3.",

  "Parameters": {
    "LoadBalancer": {
      "Description": "Load Balancer Name of the ELB in front of Telemetry HTTP nodes",
      "Type":        "String",
      "Default":     "telemetry-server-lb"
    },
    "SSHKeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "Type":        "String",
      "Default":     "mreid"
    },
    "IncomingBucketName": {
      "Description": "The name of the S3 bucket in which to store incoming data",
      "Type":        "String",
      "Default":     "telemetry-incoming-v2"
    },
    "IncomingQueueName": {
      "Description": "The name of the SQS queue in which to store incoming data",
      "Type":        "String",
      "Default":     "telemetry-incoming-v1"
    },
    "PublishedBucketName": {
      "Description": "The name of the S3 bucket in which to store published data",
      "Type":        "String",
      "Default":     "telemetry-published-v1"
    },
    "WebServerInstanceType": {
      "Description": "Type of EC2 instance to launch for HTTP nodes",
      "Type":        "String",
      "Default":     "m1.small"
    },
    "NotificationEmail": {
      "Description": "Email address to send AutoScale activity",
      "Type":        "String",
      "Default":     "mozilla-telemetry@markreid.org"
    }
  },

  "Mappings": {
    "Region2WebServerAMI": {
      "us-west-2": { "AMIpv": "ami-60b6d450" }
    },
    "Region2ProcessIncomingAMI": {
      "us-west-2": {
        "AMIpv":  "ami-60b6d450",
        "AMIhvm": "ami-78b6d448"
      }
    }
  },

  "Resources": {
    "TelemetryServerAutoScaleTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "telemetry-server-auto-scale-activity",
        "Subscription": [ { "Endpoint": { "Ref": "NotificationEmail" }, "Protocol": "email" } ]
      }
    },

    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones":       { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "WebServerLaunchConfig" },
        "MinSize":                 "2",
        "MaxSize":                 "10",
        "LoadBalancerNames":       [ { "Ref": "LoadBalancer" } ],
        "NotificationConfiguration": {
          "TopicARN": { "Ref": "TelemetryServerAutoScaleTopic" },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH", "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE", "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "Tags": [
          { "Key": "Application", "Value": "telemetry-server",      "PropagateAtLaunch": true },
          { "Key": "Name",        "Value": "telemetry-webserver",   "PropagateAtLaunch": true },
          { "Key": "Owner",       "Value": { "Ref": "SSHKeyName" }, "PropagateAtLaunch": true }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT10M"
        }
      }
    },

    "WebServerIAMProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "WebServerIAMRole" } ]
      }
    },

    "WebServerIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/telemetry/server/",
        "Policies": [ {
          "PolicyName": "WriteS3Incoming",
          "PolicyDocument": {
            "Statement": [ {
              "Effect": "Allow",
              "Action": [ "s3:GetBucketLocation", "s3:ListAllMyBuckets" ],
              "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
              "Action": [ "s3:ListBucket" ],
              "Resource": [ { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "IncomingBucketName" } ] ] } ]
            },
            {
              "Effect": "Allow",
              "Action": [ "s3:PutObject" ],
              "Resource": [ { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "IncomingBucketName" }, "/*" ] ] } ]
            } ]
          }
        }, {
          "PolicyName": "WriteSQSIncoming",
          "PolicyDocument": {
            "Statement": [ {
              "Effect": "Allow",
              "Action": [ "sqs:ListQueues", "sqs:GetQueueAttributes",
                          "sqs:ChangeMessageVisibility", "sqs:GetQueueUrl",
                          "sqs:SendMessage" ],
              "Resource": [ {
                "Fn::Join": [ "", [ "arn:aws:sqs:us-west-2:*:", { "Ref": "IncomingQueueName" } ] ]
              } ]
            } ]
          }
        }]
      }
    },

    "WebServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName":            { "Ref": "SSHKeyName" },
        "ImageId":            { "Fn::FindInMap": [ "Region2WebServerAMI", { "Ref": "AWS::Region" }, "AMIpv" ] },
        "SecurityGroups":     [ "telemetry" ],
        "IamInstanceProfile": { "Ref": "WebServerIAMProfile" },
        "InstanceType":       { "Ref": "WebServerInstanceType" },
        "UserData": { "Fn::Base64": { "Fn::Join": [ "\n", [
          "#!/bin/bash",
          "mkdir -p /mnt/telemetry",
          "mkdir -p /mnt/telemetry/data",
          "mkdir -p /mnt/telemetry/log",
          "chown -R ubuntu:ubuntu /mnt/telemetry",
          "if [ ! -e '/var/log/telemetry' ]; then",
          "  ln -s /mnt/telemetry/log /var/log/telemetry",
          "fi",
          { "Fn::Join": [ "", [
            "echo '{\"incoming_bucket\":\"", { "Ref": "IncomingBucketName" }, "\",",
            "\"incoming_queue\":\"", { "Ref": "IncomingQueueName" }, "\",",
            "\"publish_bucket\":\"", { "Ref": "PublishedBucketName" }, "\",",
            "\"aws_region\":\"", { "Ref": "AWS::Region" }, "\"}' > /etc/mozilla/telemetry_aws.json"
          ] ] },
          "echo 'start on runlevel [2345]' >> /etc/init/telemetry-server.conf",
          "start telemetry-server"
        ] ] } }
      }
    },

    "ProcessIncomingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones":       { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "ProcessIncomingLaunchConfig" },
        "MinSize":                 "1",
        "MaxSize":                 "5",
        "NotificationConfiguration": {
          "TopicARN": { "Ref": "TelemetryServerAutoScaleTopic" },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH", "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE", "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "Tags": [
          { "Key": "Application", "Value": "telemetry-server",           "PropagateAtLaunch": true },
          { "Key": "Name",        "Value": "telemetry-process-incoming", "PropagateAtLaunch": true },
          { "Key": "Owner",       "Value": { "Ref": "SSHKeyName" },      "PropagateAtLaunch": true }
        ]
      }
    },

    "ProcessIncomingHighLoadAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription":   "Alarm if more than 32 messages available: scale up",
        "Namespace":          "AWS/SQS",
        "MetricName":         "ApproximateNumberOfMessagesVisible",
        "Statistic":          "Maximum",
        "Period":             "60",
        "EvaluationPeriods":  "10",
        "Threshold":          "32",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions":   [ { "Name": "QueueName", "Value": { "Ref": "IncomingQueueName" } } ],
        "AlarmActions": [ { "Ref": "ProcessIncomingScaleUpPolicy" } ]
      }
    },

    "ProcessIncomingScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "ProcessIncomingGroup" },
        "Cooldown": "900",
        "ScalingAdjustment": "1"
      }
    },

    "ProcessIncomingLowLoadAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription":   "Alarm if fewer than 10 messages available: scale down",
        "Namespace":          "AWS/SQS",
        "MetricName":         "ApproximateNumberOfMessagesVisible",
        "Statistic":          "Maximum",
        "Period":             "60",
        "EvaluationPeriods":  "10",
        "Threshold":          "10",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions":   [ { "Name": "QueueName", "Value": { "Ref": "IncomingQueueName" } } ],
        "AlarmActions": [ { "Ref": "ProcessIncomingScaleDownPolicy" } ]
      }
    },

    "ProcessIncomingScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "ProcessIncomingGroup" },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },

    "ProcessIncomingOverflow1Group": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones":       { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "ProcessIncomingOverflow1LaunchConfig" },
        "MinSize":                 "0",
        "MaxSize":                 "3",
        "NotificationConfiguration": {
          "TopicARN": { "Ref": "TelemetryServerAutoScaleTopic" },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH", "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE", "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "Tags": [
          { "Key": "Application", "Value": "telemetry-server",                      "PropagateAtLaunch": true },
          { "Key": "Name",        "Value": "telemetry-process-incoming-overflow-1", "PropagateAtLaunch": true },
          { "Key": "Owner",       "Value": { "Ref": "SSHKeyName" },                 "PropagateAtLaunch": true }
        ]
      }
    },

    "ProcessIncomingOverflow1HighLoadAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription":   "Alarm if more than 100 messages available: scale up",
        "Namespace":          "AWS/SQS",
        "MetricName":         "ApproximateNumberOfMessagesVisible",
        "Statistic":          "Maximum",
        "Period":             "60",
        "EvaluationPeriods":  "10",
        "Threshold":          "100",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions":   [ { "Name": "QueueName", "Value": { "Ref": "IncomingQueueName" } } ],
        "AlarmActions": [ { "Ref": "ProcessIncomingOverflow1ScaleUpPolicy" } ]
      }
    },

    "ProcessIncomingOverflow1ScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "ProcessIncomingOverflow1Group" },
        "Cooldown": "900",
        "ScalingAdjustment": "1"
      }
    },

    "ProcessIncomingOverflow1LowLoadAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription":   "Alarm if fewer than 10 messages available: scale down",
        "Namespace":          "AWS/SQS",
        "MetricName":         "ApproximateNumberOfMessagesVisible",
        "Statistic":          "Maximum",
        "Period":             "60",
        "EvaluationPeriods":  "10",
        "Threshold":          "10",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions":   [ { "Name": "QueueName", "Value": { "Ref": "IncomingQueueName" } } ],
        "AlarmActions": [ { "Ref": "ProcessIncomingOverflow1ScaleDownPolicy" } ]
      }
    },

    "ProcessIncomingOverflow1ScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "ProcessIncomingOverflow1Group" },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },

    "ProcessIncomingOverflow1LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName":            { "Ref": "SSHKeyName" },
        "ImageId":            { "Fn::FindInMap": [ "Region2ProcessIncomingAMI", { "Ref": "AWS::Region" }, "AMIpv" ] },
        "SecurityGroups":     [ { "Ref": "ProcessIncomingSecurityGroup" } ],
        "IamInstanceProfile": { "Ref": "ProcessIncomingIAMProfile" },
        "InstanceType":       "m1.xlarge",
        "SpotPrice":          "0.20",
        "BlockDeviceMappings": [
          { "DeviceName": "/dev/xvdb", "VirtualName": "ephemeral0" },
          { "DeviceName": "/dev/xvdc", "VirtualName": "ephemeral1" },
          { "DeviceName": "/dev/xvdd", "VirtualName": "ephemeral2" },
          { "DeviceName": "/dev/xvde", "VirtualName": "ephemeral3" }
        ],
        "UserData": { "Fn::Base64": { "Fn::Join": [ "\n", [
          "#!/bin/bash",
          "umount /mnt",
          "yes | mdadm --create /dev/md0 --level=0 -c64 --raid-devices=4 /dev/xvdb /dev/xvdc /dev/xvdd /dev/xvde",
          "echo 'DEVICE /dev/xvdb /dev/xvdc /dev/xvdd /dev/xvde' >> /etc/mdadm/mdadm.conf",
          "mdadm --detail --scan >> /etc/mdadm/mdadm.conf",
          "mkfs.ext3 -T largefile /dev/md0",
          "# pause briefly to let md0 get ready",
          "sleep 3",
          "mkdir -p /mnt",
          "mount /dev/md0 /mnt",
          "mkdir -p /mnt/telemetry/log",
          "mkdir -p /mnt/telemetry/processed",
          "mkdir -p /mnt/telemetry/work",
          "chown -R ubuntu:ubuntu /mnt/telemetry",
          "if [ ! -e '/var/log/telemetry' ]; then",
          "  ln -s /mnt/telemetry/log /var/log/telemetry",
          "fi",
          { "Fn::Join": [ "", [
            "echo '{\"incoming_bucket\":\"", { "Ref": "IncomingBucketName" }, "\",",
            "\"incoming_queue\":\"", { "Ref": "IncomingQueueName" }, "\",",
            "\"publish_bucket\":\"", { "Ref": "PublishedBucketName" }, "\",",
            "\"aws_region\":\"", { "Ref": "AWS::Region" }, "\"}' > /etc/mozilla/telemetry_aws.json"
          ] ] },
          "echo 'start on runlevel [2345]' >> /etc/init/telemetry-incoming.conf",
          "start telemetry-incoming"
        ] ] } }
      }
    },

    "WebServerHighLoadAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription":   "Alarm if CPU load is too high: scale up",
        "Namespace":          "AWS/EC2",
        "MetricName":         "CPUUtilization",
        "Statistic":          "Average",
        "Period":             "60",
        "EvaluationPeriods":  "3",
        "Threshold":          "90",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions":   [ { "Name": "AutoScalingGroupName", "Value": { "Ref": "WebServerGroup" } } ],
        "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ]
      }
    },

    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "WebServerGroup" },
        "Cooldown": "120",
        "ScalingAdjustment": "1"
      }
    },

    "WebServerLowLoadAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription":   "Alarm if CPU load is too low: scale down",
        "Namespace":          "AWS/EC2",
        "MetricName":         "CPUUtilization",
        "Statistic":          "Average",
        "Period":             "60",
        "EvaluationPeriods":  "3",
        "Threshold":          "70",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions":   [ { "Name": "AutoScalingGroupName", "Value": { "Ref": "WebServerGroup" } } ],
        "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ]
      }
    },

    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "WebServerGroup" },
        "Cooldown": "300",
        "ScalingAdjustment": "-1"
      }
    },

    "ProcessIncomingIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/telemetry/server/",
        "Policies": [ {
          "PolicyName": "ReadAndDeleteS3Incoming",
          "PolicyDocument": {
            "Statement": [ {
              "Effect": "Allow",
              "Action": [ "s3:GetBucketLocation", "s3:ListAllMyBuckets" ],
              "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
                "Action": [ "s3:ListBucket" ],
              "Resource": [ {
                "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "IncomingBucketName" } ] ]
              } ]
            },
            {
              "Effect": "Allow",
                "Action": [ "s3:GetObject", "s3:DeleteObject" ],
              "Resource": [ {
                "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "IncomingBucketName" }, "/*" ] ]
              } ]
            } ]
          }
        }, {
          "PolicyName": "WriteS3Published",
          "PolicyDocument": {
            "Statement": [ {
              "Effect": "Allow",
              "Action": [ "s3:GetBucketLocation", "s3:ListAllMyBuckets" ],
              "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
                "Action": [ "s3:ListBucket" ],
              "Resource": [ {
                "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "PublishedBucketName" } ] ]
              } ]
            },
            {
              "Effect": "Allow",
                "Action": [ "s3:PutObject" ],
              "Resource": [ {
                "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "PublishedBucketName" }, "/*" ] ]
              } ]
            } ]
          }
        }, {
          "PolicyName": "ReadAndDeleteSQSIncoming",
          "PolicyDocument": {
            "Statement": [ {
              "Effect": "Allow",
              "Action": [ "sqs:ListQueues", "sqs:GetQueueAttributes",
                          "sqs:ReceiveMessage", "sqs:DeleteMessage",
                          "sqs:ChangeMessageVisibility", "sqs:GetQueueUrl" ],
              "Resource": [ {
                "Fn::Join": [ "", [ "arn:aws:sqs:us-west-2:*:", { "Ref": "IncomingQueueName" } ] ]
              } ]
            } ]
          }
        }]
      }
    },

    "ProcessIncomingIAMProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "ProcessIncomingIAMRole" } ]
      }
    },

    "ProcessIncomingLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName":            { "Ref": "SSHKeyName" },
        "ImageId":            { "Fn::FindInMap": [ "Region2ProcessIncomingAMI", { "Ref": "AWS::Region" }, "AMIhvm" ] },
        "SecurityGroups":     [ { "Ref": "ProcessIncomingSecurityGroup" } ],
        "IamInstanceProfile": { "Ref": "ProcessIncomingIAMProfile" },
        "InstanceType":       "c3.xlarge",
        "SpotPrice":          "0.20",
        "BlockDeviceMappings": [
          { "DeviceName": "/dev/xvdb", "VirtualName": "ephemeral0" },
          { "DeviceName": "/dev/xvdc", "VirtualName": "ephemeral1" }
        ],
        "UserData": { "Fn::Base64": { "Fn::Join": [ "\n", [
          "#!/bin/bash",
          "umount /mnt",
          "yes | mdadm --create /dev/md0 --level=0 -c64 --raid-devices=2 /dev/xvdb /dev/xvdc",
          "echo 'DEVICE /dev/xvdb /dev/xvdc' >> /etc/mdadm/mdadm.conf",
          "mdadm --detail --scan >> /etc/mdadm/mdadm.conf",
          "mkfs.ext3 -T largefile /dev/md0",
          "# pause briefly to let md0 get ready",
          "sleep 3",
          "mkdir -p /mnt",
          "mount /dev/md0 /mnt",
          "mkdir -p /mnt/telemetry/log",
          "mkdir -p /mnt/telemetry/processed",
          "mkdir -p /mnt/telemetry/work",
          "chown -R ubuntu:ubuntu /mnt/telemetry",
          "if [ ! -e '/var/log/telemetry' ]; then",
          "  ln -s /mnt/telemetry/log /var/log/telemetry",
          "fi",
          { "Fn::Join": [ "", [
            "echo '{\"incoming_bucket\":\"", { "Ref": "IncomingBucketName" }, "\",",
            "\"incoming_queue\":\"", { "Ref": "IncomingQueueName" }, "\",",
            "\"publish_bucket\":\"", { "Ref": "PublishedBucketName" }, "\",",
            "\"aws_region\":\"", { "Ref": "AWS::Region" }, "\"}' > /etc/mozilla/telemetry_aws.json"
          ] ] },
          "echo 'start on runlevel [2345]' >> /etc/init/telemetry-incoming.conf",
          "start telemetry-incoming"
        ] ] } }
      }
    },

    "ProcessIncomingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for ProcessIncoming workers",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" }
        ]
      }
    }
  },

  "Outputs": {
    "LoadBalancer": {
      "Description": "The name of the Load Balancer in front of the web nodes",
      "Value":  { "Ref": "LoadBalancer" }
    },
    "IncomingBucket": {
      "Description": "The name of the Incoming S3 Bucket",
      "Value":  { "Ref": "IncomingBucketName" }
    },
    "PublishedBucket": {
      "Description": "The name of the Published S3 Bucket",
      "Value":  { "Ref": "PublishedBucketName" }
    },
    "IncomingQueue": {
      "Description": "The name of the Incoming SQS Queue",
      "Value":  { "Ref": "IncomingQueueName" }
    }
  }
}
